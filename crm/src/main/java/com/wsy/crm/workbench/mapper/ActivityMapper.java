package com.wsy.crm.workbench.mapper;

import com.wsy.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jul 21 16:11:27 CST 2022
     */
    int deleteByPrimaryKey(String id);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jul 21 16:11:27 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jul 21 16:11:27 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jul 21 16:11:27 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu Jul 21 16:11:27 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     */
    int insertActivity(Activity activity);

    /**
     * 根据一定的条件按照分页要求，查询满足的市场活动信息
     * @param map 封装了查询条件，以及分页的相关要求（每页显示数目、第几页等）
     * @return 市场活动信息
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    /**
     * 根据查询条件查询市场活动总记录数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据id来对市场活动进行批量删除
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id来查询某一个市场活动，用于模态窗口显示要修改的市场活动原始信息
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 更新市场活动
     * @param activity
     * @return
     */
    int updateActivity(Activity activity);

    /**
     * 查询所有市场活动
     * @return
     */
    List<Activity> selectAllActivitys();

    /**
     * 批量保存市场活动
     * @param activityList
     * @return
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 根据活动id获取市场活动的具体信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索id获取该线索对应的所有市场活动，在detail页面上展示
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据市场活动名称模糊查询市场活动，并排除根据clueid查到的已关联过的市场活动（因为同一个市场活动与同一个线索只能关联一次）
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String,Object> map);

    /**
     * 根据市场活动的id数组，查询一些市场活动
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 根据市场活动名称模糊查询市场活动，并且查询的一定是满足和该线索（clueId）关联过的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String,Object> map);
}