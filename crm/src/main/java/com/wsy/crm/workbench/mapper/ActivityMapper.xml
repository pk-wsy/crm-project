<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wsy.crm.workbench.mapper.ActivityMapper" >
  <resultMap id="BaseResultMap" type="com.wsy.crm.workbench.domain.Activity" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jul 21 16:11:27 CST 2022.
    -->
    <id column="id" property="id" jdbcType="CHAR" />
    <result column="owner" property="owner" jdbcType="CHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="start_date" property="startDate" jdbcType="CHAR" />
    <result column="end_date" property="endDate" jdbcType="CHAR" />
    <result column="cost" property="cost" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="CHAR" />
    <result column="create_by" property="createBy" jdbcType="VARCHAR" />
    <result column="edit_time" property="editTime" jdbcType="CHAR" />
    <result column="edit_by" property="editBy" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jul 21 16:11:27 CST 2022.
    -->
    id, owner, name, start_date, end_date, cost, description, create_time, create_by, 
    edit_time, edit_by
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jul 21 16:11:27 CST 2022.
    -->
    select 
    <include refid="Base_Column_List" />
    from tbl_activity
    where id = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jul 21 16:11:27 CST 2022.
    -->
    delete from tbl_activity
    where id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insertActivity" parameterType="com.wsy.crm.workbench.domain.Activity">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jul 21 16:11:27 CST 2022.
    -->

    <!--
        对于使用这个方法的场合，肯定都是第一次添加，所以修改时间和修改者（edit_time, edit_by）
        在service传来的参数中值肯定为空，所以对于这种参数在添加时就不加上这些字段了，防止影响操作效率
    -->

    insert into tbl_activity (id, owner, name, start_date, 
      end_date, cost, description, 
      create_time, create_by)
    values (#{id,jdbcType=CHAR}, #{owner,jdbcType=CHAR}, #{name,jdbcType=VARCHAR}, #{startDate,jdbcType=CHAR}, 
      #{endDate,jdbcType=CHAR}, #{cost,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=CHAR}, #{createBy,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.wsy.crm.workbench.domain.Activity" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jul 21 16:11:27 CST 2022.
    -->
    insert into tbl_activity
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="owner != null" >
        owner,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="startDate != null" >
        start_date,
      </if>
      <if test="endDate != null" >
        end_date,
      </if>
      <if test="cost != null" >
        cost,
      </if>
      <if test="description != null" >
        description,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createBy != null" >
        create_by,
      </if>
      <if test="editTime != null" >
        edit_time,
      </if>
      <if test="editBy != null" >
        edit_by,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=CHAR},
      </if>
      <if test="owner != null" >
        #{owner,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="startDate != null" >
        #{startDate,jdbcType=CHAR},
      </if>
      <if test="endDate != null" >
        #{endDate,jdbcType=CHAR},
      </if>
      <if test="cost != null" >
        #{cost,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=CHAR},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="editTime != null" >
        #{editTime,jdbcType=CHAR},
      </if>
      <if test="editBy != null" >
        #{editBy,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.wsy.crm.workbench.domain.Activity" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jul 21 16:11:27 CST 2022.
    -->
    update tbl_activity
    <set >
      <if test="owner != null" >
        owner = #{owner,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="startDate != null" >
        start_date = #{startDate,jdbcType=CHAR},
      </if>
      <if test="endDate != null" >
        end_date = #{endDate,jdbcType=CHAR},
      </if>
      <if test="cost != null" >
        cost = #{cost,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=CHAR},
      </if>
      <if test="createBy != null" >
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="editTime != null" >
        edit_time = #{editTime,jdbcType=CHAR},
      </if>
      <if test="editBy != null" >
        edit_by = #{editBy,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wsy.crm.workbench.domain.Activity" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jul 21 16:11:27 CST 2022.
    -->
    update tbl_activity
    set owner = #{owner,jdbcType=CHAR},
      name = #{name,jdbcType=VARCHAR},
      start_date = #{startDate,jdbcType=CHAR},
      end_date = #{endDate,jdbcType=CHAR},
      cost = #{cost,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=CHAR},
      create_by = #{createBy,jdbcType=VARCHAR},
      edit_time = #{editTime,jdbcType=CHAR},
      edit_by = #{editBy,jdbcType=VARCHAR}
    where id = #{id,jdbcType=CHAR}
  </update>

  <!--根据查询条件和分页要求查询市场活动信息的具体sql语句-->
  <!--此sql语句注意事项：
      1.前端展示的页面中，包括名称、所有者、开始日期和结束日期四种，还包括一个选项框，此后通过这个选项框可以进行记录的修改与
      删除等操作，因此这个选项框在前端应当与市场表中的主键（id）进行绑定，从而可以实现这个功能，因此必须还要把主键值id查出来。
      本次查询中，为了防止日后业务需要查询其他字段，也就把activity表中所有字段均查出来了，如果仅仅对当前功能而言，查询之前五
      个字段足矣
      2.在页面展示中，所有者代表owner属性，在前端展示的是名字，但是在数据库中为了标识这个所有者，使用的是该所有者在user表中
      所对应的id值作为唯一性标识（这种做法是防止重名因素从而无法确定所有者的真实身份），因此在此处应当使用多表连接的方式
      3.不仅对于owner属性一样，对于create_time字段也是这样，对于edit_by也是这样（他们三个在activity表中都是id值存在，
      但是都要通过连接到user表查出name字段）。不同的是，由于edit_by字段可以为null，因此对于这个的多表连接查询采用的是外连
      接（即edit_by为空的记录也要查出来），另外两个字段多表连接的方式由于字段不能为空理论上外连接和内连接查询的结果相同，但内连
      接效率更高，因此优先采用的是内连接方式
      4.由于使用的resultMap规定了表中字段与实体类属性的对应关系，因此u1.name如果不取别名的话，同时还存在a.name，这样两个name
      同名字段就会不知将哪个赋予实体类name属性，因此应当给u1.name起别名，可以直接起owner，这样就会把u1.name字段查出来的值根据
      resultMap的映射关系赋予给实体类的owner属性，对于u2.name和u3.name同理
      5.由于根据不同的情况，前台可能传来不同种查询条件（可能没有任何查询条件、可能有部分查询条件、可能所有框的查询条件都有），因此
      需要在过滤条件处写入动态sql语句来进行匹配
      6.对于Limit后面的第一个数，应为从哪条记录开始，它的算法是(pageNum-1)*pageSize，然而计算的过程不能在sql语句中实现，因此
      对于这个数字的计算应该在service层中实现，然后传递给mapper层，进而传递到sql语句中，这个数字的名称使用beginNum来表示（见名知义）
      7.对于多表连接，本sql语句进行了三次多表连接，表面上看是都使用了一个表，但mysql就认为是三个表，在日后的sql中可能存在一句sql对同
      一张表连接了多次
  -->
  <select id="selectActivityByConditionForPage" parameterType="map" resultMap="BaseResultMap">
    select a.id, u1.name as owner, a.name, a.start_date, a.end_date, a.cost, a.description,
           a.create_time, u2.name as create_by, a.edit_time, u3.name as edit_by
    from tbl_activity a
    join tbl_user u1 on a.owner = u1.id
    join tbl_user u2 on a.create_by=u2.id
    left join tbl_user u3 on a.edit_by=u3.id
    <where>
      <if test="name!=null and name!=''">
        and a.name like '%' #{name} '%'
      </if>
      <if test="owner!=null and owner!=''">
        and u1.name like '%' #{owner} '%'
      </if>
      <if test="startDate!=null and startDate!=''">
        and a.start_date &gt;= #{startDate}
      </if>
      <if test="endDate!=null and endDate!=''">
        and a.end_date &lt;=#{endDate}
      </if>
    </where>
    order by a.create_time desc
    limit #{beginNo},#{pageSize}
  </select>


  <!--根据查询条件查询符合条件的总记录数（具体sql语句）-->
  <!--由于此处返回的不是具体的对象，直接使用resultType属性-->
  <select id="selectCountOfActivityByCondition" parameterType="map" resultType="int">
    select count(*)
    from tbl_activity a
    join tbl_user u1 on a.owner = u1.id
    join tbl_user u2 on a.create_by=u2.id
    left join tbl_user u3 on a.edit_by=u3.id
    <where>
      <if test="name!=null and name!=''">
        and a.name like '%' #{name} '%'
      </if>
      <if test="owner!=null and owner!=''">
        and u1.name like '%' #{owner} '%'
      </if>
      <if test="startDate!=null and startDate!=''">
        and a.start_date &gt;= #{startDate}
      </if>
      <if test="endDate!=null and endDate!=''">
        and a.end_date &lt;=#{endDate}
      </if>
    </where>
  </select>

  <!--根据id对市场活动进行批量删除-->
  <!--写操作的sql没有resultMap或resultType属性-->
  <!--foreach标签的作用是遍历数组或集合，然后把里面的内容拼成字符串
    foreach这段代码代表例如(1,2,3)
    -->
  <delete id="deleteActivityByIds" parameterType="string">
    delete from tbl_activity where id in
    <foreach collection="array" item="id" separator="," open="(" close=")">
      #{id}
    </foreach>
  </delete>

  <!--根据id查询某一个市场活动的信息-->
  <select id="selectActivityById" parameterType="string" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"></include>
    from tbl_activity
    where id = #{id}
  </select>

  <!--更新市场活动信息的具体sql-->
  <update id="updateActivity" parameterType="com.wsy.crm.workbench.domain.Activity">
    update tbl_activity set
    owner=#{owner},name=#{name},start_date=#{startDate},end_date=#{endDate},cost=#{cost},description=#{description},
    edit_time=#{editTime},edit_by=#{editBy}
    where id = #{id}
  </update>

  <!--查询所有市场活动的具体sql-->
  <select id="selectAllActivitys" resultMap="BaseResultMap">
    select a.id, u1.name as owner, a.name, a.start_date, a.end_date, a.cost, a.description,
           a.create_time, u2.name as create_by, a.edit_time, u3.name as edit_by
    from tbl_activity a
    join tbl_user u1 on a.owner = u1.id
    join tbl_user u2 on a.create_by=u2.id
    left join tbl_user u3 on a.edit_by=u3.id
    order by a.create_time desc
  </select>

  <!--批量保存市场活动的sql-->
  <insert id="insertActivityByList" parameterType="com.wsy.crm.workbench.domain.Activity">
    insert into tbl_activity(id, owner, name, start_date, end_date, cost, description, create_time, create_by)
    values(#{id},#{})
    <foreach collection="list" item="obj" separator=",">
      (#{obj.id},#{obj.owner},#{obj.name},#{obj.startDate},#{obj.endDate},#{obj.cost},#{obj.description},#{obj.createTime},#{obj.createBy})
    </foreach>
  </insert>

  <!--根据市场活动id来获取详细的市场活动信息-->
  <select id="selectActivityForDetailById" parameterType="string" resultMap="BaseResultMap">
    select a.id, u1.name as owner, a.name, a.start_date, a.end_date, a.cost, a.description,
           a.create_time, u2.name as create_by, a.edit_time, u3.name as edit_by
    from tbl_activity a
    join tbl_user u1 on a.owner = u1.id
    join tbl_user u2 on a.create_by=u2.id
    left join tbl_user u3 on a.edit_by=u3.id
    where a.id=#{id}
  </select>
  <!--根据线索id获取该线索对应的所有市场活动，在detail页面上展示-->
  <select id="selectActivityForDetailByClueId" parameterType="string" resultMap="BaseResultMap">
    select a.id,a.name,a.start_date,a.end_date,u.name as owner
    from tbl_activity a
    join tbl_user u on u.id = a.owner
    join tbl_clue_activity_relation car on car.activity_id = a.id
    where car.clue_id = #{clueId}
  </select>
  <!--根据市场活动名称模糊查询市场活动，并排除根据clueid查到的已关联过的市场活动-->
  <select id="selectActivityForDetailByNameClueId" parameterType="map" resultMap="BaseResultMap">
    select a.id,a.name,a.start_date,a.end_date,u.name as owner
    from tbl_activity a
    join tbl_user u on u.id = a.owner
    where a.name like '%' #{activityName} '%' and a.id not in(
        select activity_id
        from tbl_clue_activity_relation
        where clue_id=#{clueId}
    )
  </select>

  <!--根据市场活动的id数组，查询一些市场活动-->
  <select id="selectActivityForDetailByIds" parameterType="string" resultMap="BaseResultMap">
    select a.id, a.name, a.start_date, a.end_date,u.name as owner
    from tbl_activity a
    join tbl_user u on a.owner=u.id
    where a.id in
    <foreach collection="array" item="id" separator="," open="(" close=")">
      #{id}
    </foreach>
  </select>

  <select id="selectActivityForConvertByNameClueId" parameterType="map" resultMap="BaseResultMap">
    select a.id,a.name,a.start_date,a.end_date,u.name as owner
    from tbl_activity a
    join tbl_user u on a.owner=u.id
    where a.name like '%' #{activityName} '%' and a.id in(
        select activity_id
        from tbl_clue_activity_relation
        where clue_id = #{clueId}
    )
  </select>
</mapper>